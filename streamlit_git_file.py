# -*- coding: utf-8 -*-
"""streamlit_git_file.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pJthToNTbRYRwFrYnjYjNwfnWMsPEp8v
"""

# -*- coding: utf-8 -*-
"""Corn Yield Dashboard

Streamlit app to explore US Corn Belt yield data over time.
"""

import pandas as pd
import geopandas as gpd
import streamlit as st
import pydeck as pdk
import numpy as np


# Preprocessing
@st.cache_data
def preprocess_data(file_path, shapefile_path):
    # Load and merge CSV with shapefile, simplify geometry
    avg_df = pd.read_csv(file_path)
    shp_gdf = gpd.read_file(shapefile_path)

    # Merge on county IDs
    merged_gdf = shp_gdf.merge(avg_df, left_on='ID_2', right_on='id2')

    # Simplify geometries for faster plotting
    merged_gdf['geometry'] = merged_gdf['geometry'].simplify(0.01)

    # Extract the list of years in the dataset
    years = sorted(avg_df['year'].unique())

    return merged_gdf, years


# Visualization Functions
def plot_choropleth(gdf_year, feature, year):
    # Filter data for the selected year
    gdf_year = gdf_year[gdf_year['year'] == year]

    min_val = gdf_year[feature].min()
    max_val = gdf_year[feature].max()
    norm = (gdf_year[feature] - min_val) / (max_val - min_val)
    gdf_year["color"] = norm.apply(lambda x: [int(255 * x), 128, int(255 * (1 - x)), 180])

    layer = pdk.Layer(
        "GeoJsonLayer",
        gdf_year,
        opacity=0.7,
        stroked=False,
        filled=True,
        get_fill_color="color",
        pickable=True,
    )

    view_state = pdk.ViewState(
        latitude=40.0,
        longitude=-93.0,
        zoom=4,
        pitch=0,
    )

    r = pdk.Deck(
        layers=[layer],
        initial_view_state=view_state,
        tooltip={"text": "{county_name}\n" + feature + ": {" + feature + "}"},
    )

    st.pydeck_chart(r)
    st.caption(f"Showing **{feature}** for year **{year}**")


# Streamlit App
def main():
    st.set_page_config(layout="wide")
    st.title("ðŸŒ½ US Corn Belt Yield Dashboard")

    # File Inputs
    file_path = "all_feature_data_avg.csv"
    shapefile_path = "CornBeltCounty.shp"

    if file_path and shapefile_path:
        merged_gdf, years = preprocess_data(file_path, shapefile_path)

        # Sidebar Controls
        st.sidebar.header("Controls")
        year = st.sidebar.slider("Select Year", min_value=min(years), max_value=max(years), value=max(years))

        cols_to_use = [
            'yield', 'tmmx', 'rmax', 'vs', 'sph', 'srad',
            'vpd', 'rmin', 'pr', 'tmmn', 'th'
        ]
        feature = st.sidebar.selectbox("Select Feature", cols_to_use, index=0)

        # Plot
        st.header(f"{feature.title()} Map â€” {year}")
        plot_choropleth(merged_gdf, feature, year)
    else:
        st.info("Please upload both the CSV data and shapefile to continue.")


# Run App
if __name__ == "__main__":
    main()
